# commons

# options
# 同じコマンドを連続して実行しても履歴としては1回のみ
setopt histignorealldups
# 重複するコマンド行は古い方を削除
setopt hist_ignore_all_dups
# 直前と同じコマンドラインはヒストリに追加しない
setopt hist_ignore_dups
# 履歴を追加 (毎回 .zsh_history を作るのではなく)
setopt append_history
# 履歴をインクリメンタルに追加
setopt inc_append_history

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -v

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# fpash
## zsh-functions
fpath+=~/.zfunc

## homebrew
FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

# Use modern completion system
autoload -Uz compinit && compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# cdr
if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) && -n $(echo ${^fpath}/cdr(N)) ]]; then
    autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
    add-zsh-hook chpwd chpwd_recent_dirs
    zstyle ':completion:*' recent-dirs-insert both
    zstyle ':chpwd:*' recent-dirs-default true
    zstyle ':chpwd:*' recent-dirs-max 1000
    zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/chpwd-recent-dirs"
fi

# functions
## fzf
function fzf-cdr () {
    local selected_dir="$(cdr -l | sed -E 's/^[0-9]+ *//' | fzf --prompt="cdr >" --query "$LBUFFER")"
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
}
zle -N fzf-cdr
bindkey '^E' fzf-cdr

function history-fzf() {
  local tac

  if which tac > /dev/null; then
    tac="tac"
  else
    tac="tail -r"
  fi

  BUFFER=$(history -n 1 | eval $tac | fzf --query "$LBUFFER")
  CURSOR=$#BUFFER

  zle reset-prompt
}

zle -N history-fzf
bindkey '^r' history-fzf

fzf-src () {
    local repo=$(ghq list | fzf --preview "ghq list --full-path --exact {} | xargs eza -la --time-style iso --no-permissions --no-filesize --no-user")
    if [ -n "$repo" ]; then
        repo=$(ghq list --full-path --exact $repo)
        BUFFER="z ${repo}"
        zle accept-line
    fi
    zle clear-screen
}
zle -N fzf-src
bindkey '^]' fzf-src

# common alias
# cd
alias cdh='cd $HOME'

# ls
alias ls='exa'
alias la='ls -la'
alias ll='ls -l'

# others
alias cha='chezmoi apply'
alias bb='brew bundle --file ~/Brewfile'
alias chbb='cha && bb'
alias grep='rg'
alias cat='bat'
alias find='fd'

# export
## fzf
export FZF_DEFAULT_OPTS='--height 50% --layout=reverse'

# Mac
{{- if eq .chezmoi.os "darwin" }}
# alias

# setup
. /opt/homebrew/opt/asdf/libexec/asdf.sh
eval "$(starship init zsh)"
eval "$(zoxide init zsh)"

# completion
source <(kubectl completion zsh)
eval "$(op completion zsh)"; compdef _op op

# path
# go
export GOROOT=/usr/local/go
export GOPATH=$HOME/.go
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$GOPATH/bin

# dotnet
export DOTNET_ROOT=/usr/local/share/dotnet/x64
if [ -n $DOTNET_ROOT ]; then
  export PATH=$PATH:$DOTNET_ROOT
fi

# rye
source "$HOME/.rye/env"

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/r-hanaoka/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)

# SDKMAN
# THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

{{- end}}

# wsl2
## @see: https://github.com/deflis/dotfiles/blob/main/run_once_install_linux.sh.cmd.tmpl
## @see: https://www.chezmoi.io/user-guide/machines/windows/
{{- if (eq .chezmoi.os "linux") }}
{{-    if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
{{-      if (.chezmoi.kernel.osrelease | lower | contains "wsl2") }}
# Set up the prompt
autoload -Uz promptinit
promptinit
prompt fire red magenta blue white white white
eval "$(dircolors -b)"

# completion
source <(kubectl completion zsh)
command -v flux >/dev/null && . <(flux completion zsh)

# pipenv
export PIPENV_VENV_IN_PROJECT=1

# set up path
. /home/linuxbrew/.linuxbrew/opt/asdf/libexec/asdf.sh

## dotnet tools
export PATH="$PATH:$HOME/.dotnet/tools"

# wsl2-ssh-pageant
## ssh
export SSH_AUTH_SOCK="$HOME/.ssh/agent.sock"
if ! ss -a | grep -q "$SSH_AUTH_SOCK"; then
  rm -f "$SSH_AUTH_SOCK"
  wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
  if test -x "$wsl2_ssh_pageant_bin"; then
    (setsid nohup socat UNIX-LISTEN:"$SSH_AUTH_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin" >/dev/null 2>&1 &)
  else
    echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
  fi
  unset wsl2_ssh_pageant_bin
fi

## gpg
export GPG_AGENT_SOCK="$HOME/.gnupg/S.gpg-agent"
if ! ss -a | grep -q "$GPG_AGENT_SOCK"; then
  rm -rf "$GPG_AGENT_SOCK"
  wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
  if test -x "$wsl2_ssh_pageant_bin"; then
    (setsid nohup socat UNIX-LISTEN:"$GPG_AGENT_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin --gpg S.gpg-agent" >/dev/null 2>&1 &)
  else
    echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
  fi
  unset wsl2_ssh_pageant_bin
fi

##
export PATH="$HOME/.poetry/bin:$PATH"
export PATH=$PATH:'/mnt/c/Users/dorad/AppData/Local/Programs/Microsoft VS Code/bin'

## golang
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$GOPATH/bin
{{-      end }}
{{-    end }}
{{-  end }}